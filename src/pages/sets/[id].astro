---
import Layout from "../../layouts/Layout.astro";
import NavBar from "@/components/features/NavBar.astro";
import type { SetDTO, FlashcardDTO } from "@/types";

// Redirect if not authenticated
if (!Astro.locals.user) {
  return Astro.redirect("/login");
}

const setId = Astro.params.id;
if (!setId) {
  return Astro.redirect("/dashboard");
}

// Fetch set details
let set: SetDTO | null = null;
let flashcards: FlashcardDTO[] = [];
let error: string | null = null;

try {
  // Fetch set
  const setResponse = await Astro.locals.supabase
    .from("sets")
    .select(
      `
      id,
      name,
      description,
      category,
      created_at,
      updated_at,
      flashcards!flashcards_set_id_fkey(count)
    `
    )
    .eq("id", setId)
    .eq("user_id", Astro.locals.user.id)
    .single();

  if (setResponse.error || !setResponse.data) {
    return Astro.redirect("/dashboard");
  }

  set = {
    id: setResponse.data.id,
    name: setResponse.data.name,
    description: setResponse.data.description,
    category: setResponse.data.category,
    flashcard_count: setResponse.data.flashcards?.[0]?.count || 0,
    created_at: setResponse.data.created_at,
    updated_at: setResponse.data.updated_at,
  };

  // Fetch flashcards
  const flashcardsResponse = await Astro.locals.supabase
    .from("flashcards")
    .select("id, set_id, front, back, created_at, updated_at")
    .eq("set_id", setId)
    .eq("user_id", Astro.locals.user.id)
    .order("created_at", { ascending: false });

  if (flashcardsResponse.error) {
    console.error("Error fetching flashcards:", flashcardsResponse.error);
    error = "Nie udało się pobrać fiszek.";
  } else {
    flashcards = flashcardsResponse.data || [];
  }
} catch (err) {
  console.error("Unexpected error:", err);
  return Astro.redirect("/dashboard");
}
---

<Layout title={`${set?.name} - fiszkuj.pl`}>
  <NavBar />

  <div class="min-h-screen bg-gray-50 pt-24 pb-12">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <div class="max-w-6xl mx-auto">
        <!-- Back Button -->
        <a
          href="/dashboard"
          class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-6 transition-colors"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          <span>Powrót do dashboard</span>
        </a>

        <!-- Set Header -->
        {
          set && (
            <div class="bg-white rounded-2xl shadow-sm border border-gray-200 p-6 sm:p-8 mb-8">
              <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-4">
                <div class="flex-1">
                  <div class="flex items-center gap-3 mb-2">
                    <h1 class="text-3xl font-bold text-gray-900">{set.name}</h1>
                    {set.category && (
                      <span class="inline-block px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full">
                        {set.category}
                      </span>
                    )}
                  </div>
                  {set.description && <p class="text-gray-600">{set.description}</p>}
                </div>

                <div class="flex items-center gap-2">
                  <button
                    id="edit-set-btn"
                    class="inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 border border-gray-300 bg-white hover:bg-gray-50 h-10 px-4 py-2"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"
                      />
                    </svg>
                    Edytuj
                  </button>
                  <button
                    id="delete-set-btn"
                    class="inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 border border-red-300 bg-white text-red-600 hover:bg-red-50 h-10 px-4 py-2"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                      />
                    </svg>
                    Usuń
                  </button>
                </div>
              </div>

              <div class="flex items-center gap-4 text-sm text-gray-500">
                <div class="flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
                    />
                  </svg>
                  <span>{set.flashcard_count} fiszek</span>
                </div>
                <div class="flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  <span>Utworzono {new Date(set.created_at).toLocaleDateString("pl-PL")}</span>
                </div>
              </div>
            </div>
          )
        }

        <!-- Error Message -->
        {
          error && (
            <div class="bg-red-50 border border-red-200 text-red-800 rounded-lg p-4 mb-6">
              <p class="font-medium">{error}</p>
            </div>
          )
        }

        <!-- Flashcards Section -->
        <div class="mb-6">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-2xl font-bold text-gray-900">Fiszki</h2>
            <button
              id="start-learning-btn"
              class="inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              Rozpocznij naukę
            </button>
          </div>

          {
            flashcards.length === 0 && !error ? (
              <div class="bg-white rounded-2xl shadow-sm border border-gray-200 p-12 text-center">
                <div class="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                  <svg class="w-10 h-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
                    />
                  </svg>
                </div>
                <h3 class="text-xl font-semibold text-gray-900 mb-2">Brak fiszek w tym zestawie</h3>
                <p class="text-gray-600 mb-6 max-w-md mx-auto">
                  Dodaj fiszki do tego zestawu, aby móc rozpocząć naukę.
                </p>
                <a
                  href="/generate"
                  class="inline-flex items-center justify-center rounded-md text-base font-medium transition-colors bg-primary text-primary-foreground hover:bg-primary/90 px-6 py-3"
                >
                  Wygeneruj fiszki
                </a>
              </div>
            ) : (
              <div class="space-y-4">
                {flashcards.map((card) => (
                  <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
                    <div class="grid md:grid-cols-2 gap-6">
                      <div>
                        <h3 class="text-sm font-semibold text-gray-500 mb-2">Przód</h3>
                        <p class="text-gray-900">{card.front}</p>
                      </div>
                      <div>
                        <h3 class="text-sm font-semibold text-gray-500 mb-2">Tył</h3>
                        <p class="text-gray-900">{card.back}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Set Modal -->
  <div id="edit-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-2xl shadow-xl max-w-md w-full p-6">
      <h2 class="text-2xl font-bold text-gray-900 mb-4">Edytuj zestaw</h2>
      <form id="edit-form" class="space-y-4">
        <div>
          <label for="edit-name" class="block text-sm font-medium text-gray-700 mb-2">Nazwa</label>
          <input
            type="text"
            id="edit-name"
            name="name"
            value={set?.name}
            required
            maxlength="128"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        <div>
          <label for="edit-description" class="block text-sm font-medium text-gray-700 mb-2">Opis (opcjonalnie)</label>
          <textarea
            id="edit-description"
            name="description"
            rows="3"
            maxlength="1000"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >{set?.description}</textarea>
        </div>
        <div class="flex items-center gap-3 pt-4">
          <button
            type="submit"
            class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2"
          >
            Zapisz zmiany
          </button>
          <button
            type="button"
            id="cancel-edit-btn"
            class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors border border-gray-300 bg-white hover:bg-gray-50 h-10 px-4 py-2"
          >
            Anuluj
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="delete-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-2xl shadow-xl max-w-md w-full p-6">
      <div class="flex items-center gap-3 mb-4">
        <div class="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center">
          <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
            />
          </svg>
        </div>
        <h2 class="text-2xl font-bold text-gray-900">Usuń zestaw</h2>
      </div>
      <p class="text-gray-600 mb-6">
        Czy na pewno chcesz usunąć ten zestaw? Wszystkie fiszki w tym zestawie zostaną trwale usunięte. Tej operacji
        nie można cofnąć.
      </p>
      <div class="flex items-center gap-3">
        <button
          id="confirm-delete-btn"
          class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors bg-red-600 text-white hover:bg-red-700 h-10 px-4 py-2"
        >
          Usuń zestaw
        </button>
        <button
          id="cancel-delete-btn"
          class="flex-1 inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors border border-gray-300 bg-white hover:bg-gray-50 h-10 px-4 py-2"
        >
          Anuluj
        </button>
      </div>
    </div>
  </div>

  <script define:vars={{ setId }}>
    // Edit modal
    const editBtn = document.getElementById("edit-set-btn");
    const editModal = document.getElementById("edit-modal");
    const editForm = document.getElementById("edit-form");
    const cancelEditBtn = document.getElementById("cancel-edit-btn");

    editBtn?.addEventListener("click", () => {
      editModal?.classList.remove("hidden");
    });

    cancelEditBtn?.addEventListener("click", () => {
      editModal?.classList.add("hidden");
    });

    editForm?.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target as HTMLFormElement);
      const name = formData.get("name") as string;
      const description = formData.get("description") as string;

      try {
        const response = await fetch(`/api/v1/sets/${setId}`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name, description }),
        });

        if (response.ok) {
          window.location.reload();
        } else {
          alert("Nie udało się zaktualizować zestawu.");
        }
      } catch (error) {
        console.error("Error updating set:", error);
        alert("Wystąpił błąd podczas aktualizacji zestawu.");
      }
    });

    // Delete modal
    const deleteBtn = document.getElementById("delete-set-btn");
    const deleteModal = document.getElementById("delete-modal");
    const confirmDeleteBtn = document.getElementById("confirm-delete-btn");
    const cancelDeleteBtn = document.getElementById("cancel-delete-btn");

    deleteBtn?.addEventListener("click", () => {
      deleteModal?.classList.remove("hidden");
    });

    cancelDeleteBtn?.addEventListener("click", () => {
      deleteModal?.classList.add("hidden");
    });

    confirmDeleteBtn?.addEventListener("click", async () => {
      try {
        const response = await fetch(`/api/v1/sets/${setId}`, {
          method: "DELETE",
        });

        if (response.ok || response.status === 204) {
          window.location.href = "/dashboard";
        } else {
          alert("Nie udało się usunąć zestawu.");
        }
      } catch (error) {
        console.error("Error deleting set:", error);
        alert("Wystąpił błąd podczas usuwania zestawu.");
      }
    });

    // Start learning (placeholder)
    const startLearningBtn = document.getElementById("start-learning-btn");
    startLearningBtn?.addEventListener("click", () => {
      alert("Funkcja nauki zostanie wkrótce zaimplementowana!");
    });
  </script>
</Layout>
